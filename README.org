#+TITLE: LLM Lab
#+STARTUP: showeverything

* Overview
Testing environment for LLM CLI tools with metrics and comparison.

** Key Resources
- [[https://simonwillison.net/2023/May/18/cli-tools-for-llms/][CLI Tools for LLMs]]
- [[https://llm.datasette.io/en/stable/help.html][LLM CLI Documentation]]
- [[https://github.com/simonw/ttok][ttok]] - Token counting tool
- [[https://github.com/simonw/strip-tags][strip-tags]] - HTML cleanup
- [[https://github.com/simonw/files-to-prompt][files-to-prompt]] - File content extraction
- [[https://github.com/simonw/sqlite-utils][sqlite-utils]] - SQLite utilities
- [[https://github.com/simonw/fetch-github-issues][fetch-github-issues]] - GitHub issue fetching

** Available Model Plugins
- [[https://github.com/simonw/llm-claude-3/releases/tag/0.10][Claude 3]] - Anthropic's Claude 3 models
- [[https://github.com/simonw/llm-gemini/releases/tag/0.9][Gemini]] - Google's Gemini models
- [[https://github.com/simonw/llm-anthropic/releases/tag/0.12][Anthropic]] - Legacy Claude models
- [[https://github.com/simonw/llm-bedrock/releases/tag/0.4][Bedrock]] - AWS Bedrock integration
- [[https://github.com/taketwo/llm-ollama/releases/tag/0.8.2][Ollama]] - Local model support

* Project Structure
The project is organized into the following directories:

- ~examples/~ :: Numbered sequence of example workflows
- ~scripts/~ :: Utility scripts and tools
- ~prompts/~ :: LLM system prompts
- ~docs/~ :: Documentation and RFCs
- ~tests/~ :: Test suite
- ~data/~ :: Working directory for outputs
- ~src/~ :: Core library code
- ~config/~ :: Configuration files

* Examples
All examples are self-contained in the examples directory:

1. [[file:examples/00-getting-started.org][Getting Started]] - Basic LLM usage and setup
2. [[file:examples/01-prompts.org][Prompts]] - Working with system prompts
3. [[file:examples/02-context-management.org][Context Management]] - Managing conversation state
4. [[file:examples/03-agents.org][Agents]] - Multi-agent interactions and specialized roles
5. [[file:examples/04-embeddings.org][Embeddings]] - Working with embeddings and vector search
6. [[file:examples/05-advanced-usage.org][Advanced Usage]] - Complex workflows and integrations

* Structure

#+begin_src mermaid :file docs/diagrams/concepts.png :tangle docs/diagrams/concepts.mmd :mkdirp t
  mindmap
    root((LLM Project))
      Concepts
	CoreConcepts((Core Concepts))
	  LLM((Large Language Models))
	  Prompts((Prompts))
	  Templates((Templates))
	  Embeddings((Embeddings))
	  Context((Context))
	  Agents((Agents))
	  MultiAgent((Multi-Agent Systems))
	  Tokenization((Tokenization))
	AnalysisFrameworks((Analysis Frameworks))
	    SIN((Structured Insight Navigator))
	    RAID((RAID))
	EvaluationMetrics((Evaluation Metrics))
	   TokenUsage((Token Usage))
	   Performance((Performance))
	   Cost((Cost))
      TrainingAndExamples
	  LiterateProgramming((Literate Programming))
	    OrgMode((Org Mode Files))
	       CodeBlocks((Code Blocks))
		 Execution((Execution))
	       Documentation((Documentation))
	  Examples((Examples Directory))
	      BasicUsage((Basic Usage Examples))
		GettingStarted((Getting Started))
	      TemplateExamples((Template Examples))
		Python((Python Templates))
		JavaScript((JavaScript Templates))
		Rust((Rust Templates))
		Go((Go Templates))
		Clojure((Clojure Templates))
		Scheme((Scheme Templates))
		Elisp((Elisp Templates))
	      ContextMgmt((Context Management))
	      AgentsExamples((Agent Examples))
		  MemoryAgent((Memory Agent Examples))
		  DialogueAgent((Dialogue Agent Examples))
		  ReflectionAgent((Reflection Agent Examples))
		  SummaryAgent((Summary Agent Examples))
		  Workflow((Workflow Examples))
	      EmbeddingsExamples((Embeddings Examples))
		  SingleEmbedding((Single Embedding))
		  Collection((Embedding Collection))
		  FileProcessing((File Processing))
		  Clustering((Clustering))
		  PythonIntegration((Python Integration))
	      AdvancedUsage((Advanced Usage))
		  MultiAgentWorkflows((Multi-Agent Workflows))
		  AdvancedAnalysis((Advanced Analysis))

      Commands
	  CoreCommands((Core LLM Commands))
	      llm((llm CLI))
		help((Help))
		models((Models))
		templates((Templates))
		embed((Embed))
		chat((Chat))
		logs((Logs))
		keys((Keys))
		session((Session))
		install((Install))
	      filesToPrompt((files-to-prompt))
	      stripTags((strip-tags))
	      ttok((ttok))
	  AgentCommands((Agent Specific Commands))
	     note(Note Command)
	     private(Private Note Command)
	     task(Task Command)
	     summarize(Summarize Command)
	     keep(Keep Command)
	     pickle(Pickle Command)
	     rehydrate(Rehydrate Command)
	     meta(Meta Command)
	  MakeCommands((Makefile Commands))
	      init((init))
	      check((check))
	      run((run))
	      test((test))
	      clean((clean))
	      lint((lint))
	      docs((docs))
	      sessionAgent((session-agent))
	      registerTemplates((register-templates))
	      checkCoverage((check-coverage))
	      analyzePosts((analyze-posts))
	  AuxiliaryCommands((Auxiliary Commands))
	      gitConfig((git-config))
	      emacs((emacs))
	      tangle((tangle))
	      layout((layout))
      Setup
	  EnvironmentSetup((Environment Setup))
	    Venv((Virtual Environment Setup))
	    Dependencies((Dependency Installation))
	    EnvVars((Environment Variables))
	       APIKeys((API Keys))
	       AuthTokens((Auth Tokens))
	  ModelSetup((Model Setup))
	      DefaultModel((Default Model Selection))
	      ModelRegistration((Model Registration))
	  TemplateSetup((Template Setup))
	      RegistrationScripts((Registration Scripts))
	      PromptFiles((Prompt Files))
	      TemplateConfiguration((Template Configuration))
	  ProviderSetup((Provider Setup))
	      APIKeys((API Key Setting))
	  Documentation((Documentation))
	      Readme((README.org))
	      ScriptsReadme((scripts/README.org))
	      TemplateReadme((template directories README))
#+end_src

#+RESULTS:
[[file:docs/diagrams/concepts.png]]

* Development

** Quick Start
1. Clone the repository
2. Run ~make init~ to set up the environment
3. Run ~make check-env~ to verify setup
4. See examples directory for usage patterns

** Available Tools
- ~make check-coverage~ :: Analyze command coverage
- ~make analyze-posts~ :: Compare with reference implementations
- ~make register-templates~ :: Register all templates

** Testing
See ~tests/~ directory for the test suite and ~examples/~ for functional examples.

* Metrics
Performance metrics and telemetry are available through:
- LLM logs (~llm logs~)
- OpenTelemetry integration
- Custom metrics collection

See ~docs/~ directory for detailed metrics documentation.

* References
- [[https://github.com/open-telemetry/semantic-conventions/blob/main/docs/gen-ai/gen-ai-metrics.md][OpenTelemetry LLM Metrics]]
- [[https://llm.datasette.io/][LLM CLI Documentation]]
