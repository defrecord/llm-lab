#+TITLE: LLM Command Examples
#+PROPERTY: header-args :mkdirp yes :results output :exports both
#+PROPERTY: header-args:sh :dir (concat (projectile-project-root) "data")

* Initial Setup
First, ensure we have a default model set.

#+begin_src shell :llm t :results silent
llm models default llama3.2
#+end_src

* Basic LLM Usage
Let's start with a simple prompt example.

#+begin_src shell :llm t :results file :file haiku.md
llm "Write a haiku about debugging"
#+end_src

#+RESULTS:
[[file:haiku.md]]

* Model Information
View available models and configuration.

#+begin_src shell :llm t :results file :file models.txt
llm models list | head -n 10
#+end_src

#+RESULTS:
[[file:models.txt]]

* Template Management
First, list available templates.

#+begin_src shell :llm t :results file :file templates.txt
llm templates list
#+end_src

#+RESULTS:
[[file:templates.txt]]

Register a basic Python template. Note: We mark this :llm nil as it's a one-time setup.

#+begin_src shell :llm nil
llm --system "Write Python code" --save python-template
#+end_src

#+RESULTS:

* Session Agent Example
Here's an example using the session agent template.

#+begin_src shell :llm t :results file :file session-example.txt
llm -t session-agent "Reviewing LLM commands" 2>&1 | head -n 15
#+end_src

#+RESULTS:
[[file:session-example.txt]]

* Command History and Logs
View recent command history.

#+begin_src shell :llm t :results file :file command-history.txt
llm logs -c | head -n 10
#+end_src

#+RESULTS:
[[file:command-history.txt]]

Analyze model usage.

#+begin_src shell :llm t :results file :file model-usage.txt
llm logs --json | jq -r '.[]|.model' | sort | uniq -c | sort -rn
#+end_src

#+RESULTS:
[[file:model-usage.txt]]

* Note on Interactive Commands
The following commands require user interaction and are not suitable for automated execution:

# Interactive chat session - marked as :llm nil
#+begin_src shell :llm nil
llm chat -m llama3.2
#+end_src

#+RESULTS:
: Chatting with llama3.2:latest
: Type 'exit' or 'quit' to exit
: Type '!multi' to enter multiple lines, then '!end' to finish
: > 

# Git operations - marked as :llm nil
#+begin_src shell :llm nil
git diff --staged | llm -t commit
#+end_src

#+RESULTS:
#+begin_example
class CommitMessageGenerator:
    def __init__(self):
        self.types = {
            "feat": "new feature",
            "fix": "bug fix",
            "docs": "documentation changes",
            "style": "formatting changes",
            "refactor": "code refactoring",
            "test": "adding/modifying tests",
            "chore": "maintenance tasks"
        }
    
    def analyze_diff(self, diff_output):
        # Implement logic to determine the type from the diff output
        # This may involve regular expressions or string manipulation
        type_ = None
        for line in diff_output.splitlines():
            if line.startswith("+ ") or line.startswith("- "):
                action = line[2:]
                if action == "+f" or action == "-d":
                    continue
                elif action == "+a":
                    type_ = "test"
                elif action == "+r":
                    type_ = "refactor"
                elif action == "+m":
                    type_ = "docs"
                else:
                    if line.startswith("+ ") and not line.startswith("+feat "):
                        type_ = "feat"
                    elif line.startswith("- ") and (line.startswith("-fix ") or line.startswith("-feat ")) and not line.startswith("-feat -"):
                        type_ = "fix"
        return type_

    def format_commit_message(self, diff_output, issues=None, major_version_change=False):
        commit_type = self.analyze_diff(diff_output)
        if commit_type is None:
            raise ValueError("Failed to determine the commit type from the diff output")

        subject_line = f"{commit_type}{' (' + self.types.get(commit_type, 'unknown') + ')' if self.types[commit_type] else ''}"
        body = ""
        
        for line in diff_output.splitlines():
            if line.startswith("+ ") or line.startswith("- "):
                continue
            elif not line.strip():
                break
            body += f"{line}\n"
        
        # Check if there are any breaking changes
        if commit_type == "refactor" and ("BREAKING CHANGE:" in diff_output or "-- BREAKING CHANGE" in diff_output):
            subject_line = f"BREAKING CHANGE {subject_line}"
        
        footer = ""
        if major_version_change:
            footer += f"# Major version changed to {major_version_change}\n"
        elif issues:
            for issue in issues:
                footer += f"# Issues: {issue}\n"

        # Group related changes
        body_grouped = False
        grouped_body_lines = []
        lines = diff_output.splitlines()
        new_lines = []
        for line in lines:
            if not line.strip():
                break
            if line.startswith("+ ") or line.startswith("- "):
                continue
            new_lines.append(line)
            if not body_grouped and len(new_lines) > 50:
                grouped_body_lines.extend(new_lines)
                new_lines = [line]
        if new_lines:
            grouped_body_lines.extend(new_lines)
        
        # Format the commit message
        formatted_message = f"{subject_line}\n\n{body or 'No changes'}\n{'\n' + '\n'.join(grouped_body_lines) if grouped_body_lines else ''}\n{'\n'.join(footer.splitlines()) if footer else ''}"
        
        return subject_line, formatted_message

    def generate_commit_message(self, diff_output, issues=None, major_version_change=False):
        return self.format_commit_message(diff_output, issues, major_version_change)

# Example usage
commit_generator = CommitMessageGenerator()
diff_output = """
+ This is a new feature
feat add user authentication

- Bug fix in the login form
fix fix bug in login form

+ Documentation for the new user interface
docs update documentation for UI

- Formatting changes
style formatting change
"""

subject_line, formatted_message = commit_generator.generate_commit_message(diff_output)
print("Subject line:", subject_line)
print("Formatted message:\n", formatted_message)
#+end_example
