llm --system "Write a clean, well-documented Python function that follows PEP 8 style guide. Include type hints, docstring with parameters and return value, and example usage in comments." --extract --save python-function

llm --system "Write a modern JavaScript function using ES6+ features. Include JSDoc documentation with parameters, return type, and example usage." --extract --save js-function

llm --system "Write a safe Rust function with proper error handling. Include documentation comments, type annotations, and example usage." --extract --save rust-function

llm --system "Write an idiomatic Go function following Go style conventions. Include documentation comments and example usage." --extract --save go-function

llm --system "Write a pure Clojure function following functional programming principles. Include docstring with specs, parameters, return value, and example usage." --extract --save clojure-function

llm --system "Write a Scheme function following R6RS conventions. Include documentation with parameters, return value, and example usage." --extract --save scheme-function

llm --system "Write an Emacs Lisp function following elisp conventions. Include docstring with interactive form if needed, parameters, return value, and example usage." --extract --save elisp-function

llm -m llama3.2 -t python-function "implement binary search" -x

llm -m llama3.2 -t rust-function "implement quicksort" -x

llm -m llama3.2 -t go-function "implement http server" -x

llm -m llama3.2 -t clojure-function "dfs [graph start]" -x

llm -m llama3.2 -t scheme-function "implement (append (l1 l2))" -x

llm -m llama3.2 -t elisp-function "wrap the llm eco tools from curl+ strip-tags or files-to-prompt, ttok, and llm in a library" -x

llm -m llama3.2 -t python-function --system "optimize for memory usage" "implement matrix multiplication" -x

llm --system "Write a Python function optimized for numerical computations using NumPy" --extract --save python-numpy
