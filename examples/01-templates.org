#+TITLE: LLM Template Examples
#+PROPERTY: header-args :mkdirp yes :results output :exports both
#+PROPERTY: header-args:sh :dir (concat (projectile-project-root) "data")

* Template Setup
:PROPERTIES:
:CUSTOM_ID: template-setup
:END:

Note: These blocks are marked with :llm nil as they are one-time setup operations.

** Python Function Template
#+begin_src shell :llm t :results silent
llm --system "Write a clean, well-documented Python function that follows PEP 8 style guide. Include type hints, docstring with parameters and return value, and example usage in comments." --extract --save python-function
#+end_src

** JavaScript Function Template
#+begin_src shell :llm t :results silent
llm --system "Write a modern JavaScript function using ES6+ features. Include JSDoc documentation with parameters, return type, and example usage." --extract --save js-function
#+end_src

** Rust Function Template
#+begin_src shell :llm t :results silent
llm --system "Write a safe Rust function with proper error handling. Include documentation comments, type annotations, and example usage." --extract --save rust-function
#+end_src

** Go Function Template
#+begin_src shell :llm t :results silent
llm --system "Write an idiomatic Go function following Go style conventions. Include documentation comments and example usage." --extract --save go-function
#+end_src

** Clojure Function Template
#+begin_src shell :llm t :results silent
llm --system "Write a pure Clojure function following functional programming principles. Include docstring with specs, parameters, return value, and example usage." --extract --save clojure-function
#+end_src

** Scheme Function Template
#+begin_src shell :llm t :results silent
llm --system "Write a Scheme function following R6RS conventions. Include documentation with parameters, return value, and example usage." --extract --save scheme-function
#+end_src

** Elisp Function Template
#+begin_src shell :llm t :results silent
llm --system "Write an Emacs Lisp function following elisp conventions. Include docstring with interactive form if needed, parameters, return value, and example usage." --extract --save elisp-function
#+end_src

* Template Usage Examples
:PROPERTIES:
:CUSTOM_ID: template-usage
:END:

** Python Examples
#+begin_src shell :llm t :results file :file ../data/binary_search.py
llm -m llama3.2 -t python-function "implement binary search" -x
#+end_src

** Rust Examples
#+begin_src shell :llm t :results file :file ../data/quicksort.rs
llm -m llama3.2 -t rust-function "implement quicksort" -x
#+end_src

** Go Examples
#+begin_src shell :llm t :results file :file ../data/http_server.go
llm -m llama3.2 -t go-function "implement http server" -x
#+end_src

** Clojure Examples
#+begin_src shell :llm t :results file :file ../data/dfs.clj
llm -m llama3.2 -t clojure-function "dfs [graph start]" -x
#+end_src

** Scheme Examples
#+begin_src shell :llm t :results file :file ../data/append.scm
llm -m llama3.2 -t scheme-function "implement (append (l1 l2))" -x
#+end_src

** Elisp Examples
#+begin_src shell :llm t :results file :file ../data/llm-eco.el
llm -m llama3.2 -t elisp-function "wrap the llm eco tools from curl+ strip-tags or files-to-prompt, ttok, and llm in a library" -x
#+end_src

* Advanced Usage
:PROPERTIES:
:CUSTOM_ID: advanced-usage
:END:

** Custom Context Example
#+begin_src shell :llm t :results file :file ../data/matrix_multiply.py
llm -m llama3.2 -t python-function --system "optimize for memory usage" "implement matrix multiplication" -x
#+end_src

** Template Modification
Note: Template modifications are setup operations, marked with :llm nil

#+begin_src shell :llm nil
llm --system "Write a Python function optimized for numerical computations using NumPy" --extract --save python-numpy
#+end_src
