* Setup 

#+begin_src shell
uv run llm install llm-gemini

#+end_src

* Language Templates
  :PROPERTIES:
  :CUSTOM_ID: language-templates
  :END:
** Python Function
   :PROPERTIES:
   :CUSTOM_ID: python-function
   :END:
#+begin_src shell
  llm --system "Write a clean, well-documented Python function that follows PEP 8 style guide. Include type hints, docstring with parameters and return value, and example usage in comments." --extract --save python-function
#+end_src

#+RESULTS:


#+begin_src shell :results output
  llm -m gemini-1.5-pro-latest -t python-function "implement binary search" -x
#+end_src

#+RESULTS:
#+begin_example
from typing import List, Optional

def binary_search(arr: List[int], target: int) -> Optional[int]:
    """
    Performs a binary search on a sorted list.

    Args:
        arr: A sorted list of integers.
        target: The integer value to search for.

    Returns:
        The index of the target element if found, otherwise None.

    Examples:
        >>> binary_search([2, 5, 7, 8, 11, 12], 13)
        >>> binary_search([2, 5, 7, 8, 11, 12], 11)
        4
        >>> binary_search([2, 5, 7, 8, 11, 12], 0)
        >>> binary_search([], 5)


    """
    low = 0
    high = len(arr) - 1

    while low <= high:
        mid = (low + high) // 2  # Integer division

        if arr[mid] == target:
            return mid
        elif arr[mid] < target:
            low = mid + 1
        else:
            high = mid - 1

    return None  # Target not found

#+end_example

** JavaScript Function
   :PROPERTIES:
   :CUSTOM_ID: javascript-function
   :END:
#+begin_src shell
  llm --system "Write a modern JavaScript function using ES6+ features. Include JSDoc documentation with parameters, return type, and example usage." --extract --save js-function
#+end_src

#+RESULTS:

** Rust Function
   :PROPERTIES:
   :CUSTOM_ID: rust-function
   :END:
#+begin_src shell :tangle data/template_rust_function.sh :mkdirp t
  llm --system "Write a safe Rust function with proper error handling. Include documentation comments, type annotations, and example usage." --extract --save rust-function
#+end_src

#+RESULTS:

#+begin_src shell :results output
  llm -m gemini-1.5-pro-latest -t rust-function "implement quicksort" | tee data/quicksort.rs | head
#+end_src

#+RESULTS:
#+begin_example
use std::cmp::Ordering;
use std::error::Error;
use std::fmt;

#[derive(Debug)]
pub enum QuicksortError {
    EmptyInput,
}

impl fmt::Display for QuicksortError {
#+end_example

** Go Function
   :PROPERTIES:
   :CUSTOM_ID: go-function
   :END:
#+begin_src shell
  llm --system "Write an idiomatic Go function following Go style conventions. Include documentation comments and example usage." --extract --save go-function
#+end_src

#+RESULTS:


#+begin_src shell :results output
  llm -m gemini-1.5-pro-latest -t go-function "implement http server" -x | tee data/http-server.go | head 
#+end_src

#+RESULTS:
#+begin_example
package main

import (
	"fmt"
	"log"
	"net/http"
)

// handleRoot serves the root path ("/") by writing a simple greeting.
// It takes an http.ResponseWriter to write the response and an *http.Request (which is unused in this example).
#+end_example

** Clojure Function
   :PROPERTIES:
   :CUSTOM_ID: clojure-function
   :END:
#+begin_src shell
  llm --system "Write a pure Clojure function following functional programming principles. Include docstring with specs, parameters, return value, and example usage." --extract --save clojure-function
#+end_src

#+RESULTS:


#+begin_src shell :results output
  llm -m gemini-1.5-pro-latest -t clojure-function "dfs [graph start]" -x | tee data/dfs.clj | head
#+end_src

#+RESULTS:
#+begin_example
(ns my-graph.core)

(defn dfs
  "Performs a Depth-First Search on a graph.

  Specs:
    graph :: {node [connected-nodes]}  (A map representing the graph)
    start :: keyword                   (The starting node for the search)
    visited :: #{keyword}             (Set of visited nodes, used internally)

#+end_example

** Scheme Function
   :PROPERTIES:
   :CUSTOM_ID: scheme-function
   :END:
#+begin_src shell
  llm --system "Write a Scheme function following R6RS conventions. Include documentation with parameters, return value, and example usage." --extract --save scheme-function
#+end_src

#+RESULTS:


#+begin_src shell :results output
  llm -m gemini-1.5-pro-latest -t scheme-function "implement (append (l1 l2))" -x | tee data/append.scm | head
#+end_src

#+RESULTS:
#+begin_example
#!r6rs
(import (rnrs base)
        (rnrs lists))

;; append: list? list? -> list?
;; Appends two lists together.
;;
;; Parameters:
;;   l1: The first list.
;;   l2: The second list.
#+end_example

** Emacs Lisp Function
   :PROPERTIES:
   :CUSTOM_ID: emacs-lisp-function
   :END:
#+begin_src shell
  llm --system "Write an Emacs Lisp function following elisp conventions. Include docstring with interactive form if needed, parameters, return value, and example usage." --extract --save elisp-function
#+end_src

#+RESULTS:



#+begin_src shell :results output
  llm -m gemini-1.5-pro-latest -t elisp-function "wrap the llm eco tools from curl+ strip-tags or files-to-prompt, ttok, and llm in a library" -x | tee data/llm-eco.el | head
#+end_src

#+RESULTS:
#+begin_example
(defvar llm-eco-tools-api-key nil
  "API key for LLM Eco Tools (e.g., for 'ttok').  Set this before using the functions.")

(defun llm-eco-tools-curl-and-strip-tags (url)
  "Fetch content from URL and strip HTML/XML tags.

Parameters:
  URL: The URL to fetch.

Return value:
#+end_example

** Usage Examples
   :PROPERTIES:
   :CUSTOM_ID: usage-examples
   :END:
Basic usage:

#+begin_src shell
  llm -m gemini-1.5-pro-latest -t python-function "implement binary search"
  llm -m gemini-1.5-pro-latest -t rust-function "implement quicksort"
  llm -m gemini-1.5-pro-latest -t go-function "implement http server"
#+end_src

With additional context:

#+begin_src shell :results output
  llm -m gemini-1.5-pro-latest -t python-function --system "optimize for memory usage" "implement matrix multiplication"
#+end_src

Save modified template:

#+begin_src shell :results output
  llm --system "Write a Python function optimized for numerical computations using NumPy" --extract --save python-numpy
#+end_src
